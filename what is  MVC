MVC
全称Model（模型）-View（视图）-Controller（控制器），这是一种开发模式，他的好处是可以将界面和业务逻辑分离。

Model（模型），是程序的主体部分，主要包含业务数据和业务逻辑。在模型层，还会涉及到用户发布的服务，在服务中会根据不同的业务需求，更新业务模型中的数据。
View(视图），是程序呈现给用户的部分，是用户和程序交互的接口，用户会根据具体的业务需求，在View视图层输入自己特定的业务数据，并通过界面的事件交互，将对应的输入参数提交给后台控制器进行处理。
Controller（控制器），Controller是用来处理用户输入数据，已经更新业务模型的部分。控制器中接收了用户与界面交互时传递过来的数据，并根据数据业务逻辑来执行服务的调用和更新业务模型的数据和状态。
   
MVC的处理过程：首先控制器接受用户的请求，调用相应的模型来进行业务处理，并返回数据给控制器。控制器调用相应的视图来显示处理的结果。并通过视图呈现给用户。实现人机数据之间的交互；
搞清楚MVC到底都代表什么之后，我们要考虑的是我们为什么要用MVC或是类似于这种模式的架构思想：
     
1.各施其职，互不干涉
在MVC模式中，三个层各施其职，所以如果一旦哪一层的需求发生了变化，就只需要更改相应的层中的代码而不会影响到其它层中的代码。
2.有利于开发中的分工
在MVC模式中，由于按层把系统分开，那么就能更好的实现开发中的分工。网页设计人员可以进行开发视图层中的JSP，对业务熟悉的开发人员可开发业务层，而其它开发人员可开发控制层。
3.有利于组件的重用
分层后更有利于组件的重用。如控制层可独立成一个能用的组件，视图层也可做成通用的操作界面。
 
目前，像spring、hibernate等主流框架，都是遵照着MVC设计模式而设计的。
  hibernate：是底层基于jdbc的orm(对象关系映射)持久化框架，即：表与类的映射，字段与属性的映射，记录与对象的映射数据库模型也就是Model;
  struts ：提供的丰富标签是用于显示层View;同时struts也充当了实现Control的功能(不管是Struts1，还是Struts2)，接收参数，视图分发。
  Spring：是用于降低层与层间耦合度的，就是所有的类都可以由spring统一创建，用时只需注入即可(IOC)
 
另外：SpringMVC就是在MVC的技术上实现自己的功能的。
总结：程序设计使用MVC等设计模式，最终目的就是达到天人合一的“高内聚，低耦合”，甚至零耦合！
